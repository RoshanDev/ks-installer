# upgrade legacy openpitix
- block:
    - name: OpenPitrix | Getting openpitrix jobs installation files
      copy:
        src: "{{ item }}"
        dest: "{{ kubesphere_dir }}/"
      loop:
        - "openpitrix"

    - name: OpenPitrix | Creating openpitrix jobs manifests
      template:
        src: "{{ item.file }}.j2"
        dest: "{{ kubesphere_dir }}/{{ item.path }}/{{ item.file }}"
      with_items:
        - { path: openpitrix, file: ks-openpitrix-upgrade.yaml }
      #Roshan:Debug
      debug:
        msg:
          - Roshan:Debug Creating openpitrix jobs manifests, file is {{ kubesphere_dir }}/{{ item.path }}/{{ item.file }}
    - name: OpenPitrix | Upgrade OpenPitrix
      shell: >
        {{ bin_dir }}/kubectl apply -f {{ kubesphere_dir }}/openpitrix/ks-openpitrix-upgrade.yaml
      register: job
      failed_when: "job.stderr and 'Warning' not in job.stderr"
      #Roshan:Debug
      debug:
        msg:
          - Roshan:Debug execute 'kubectl apply -f {{ kubesphere_dir }}/openpitrix/ks-openpitrix-upgrade.yaml' to upgrade openpitrix and register job status, value is {{ job.stdout }}

    - name: OpenPitrix | Delete namespace openpitrix-system
      shell: >
        {{ bin_dir }}/kubectl delete  namespace openpitrix-system --force --grace-period=0
      #Roshan:Debug
      debug:
        msg:
          - Roshan:Debug execute 'kubectl delete  namespace openpitrix-system --force --grace-period=0' to delete namespace openpitrix-system

  when:
    -  OPMigrate is defined and OPMigrate


# upgrade legacy alerting

- name: Alerting | Checking status v3.0.0
  shell: >
    {{ bin_dir }}/kubectl get deploy -n kubesphere-alerting-system 2>1 | grep "alerting" | wc -l
  register: alerting_check

#Roshan:Debug
- name: Roshan:Debug Alerting | Checking status v3.0.0
  debug:
    msg: execute 'kubectl get deploy -n kubesphere-alerting-system 2>1 | grep "alerting" | wc -l' to check alerting status, value is {{ alerting_check.stdout }}

- block:
    - name: Alerting | Getting migration files
      copy:
        src: "{{ item }}"
        dest: "{{ kubesphere_dir }}/"
      loop:
        - "alerting-migration"

    - name: Alerting | Getting migration files
      template:
        src: "{{ item.file }}.j2"
        dest: "{{ kubesphere_dir }}/{{ item.path }}/{{ item.file }}"
      with_items:
        - { path: alerting-migration, file: ks-alerting-migration.yaml}

    - name: Alerting | Creating migration job
      shell: >
        {{ bin_dir }}/kubectl apply -f {{ kubesphere_dir }}/alerting-migration
      register: job
      failed_when: "job.stderr and 'Warning' not in job.stderr"

    - name: Alerting | Getting migration job status
      shell: >
        {{ bin_dir }}/kubectl get pod -n kubesphere-system -l job-name=ks-alerting-migration --no-headers | awk '{print $3}'
      register: job_status
      until: job_status.stdout.find('Completed') != -1
      retries: 90
      delay: 20

    - name: Alerting | Getting migration job status
      shell: >
        {{ bin_dir }}/kubectl delete ns kubesphere-alerting-system --force --grace-period=0
      failed_when: false

  when:
    - alerting_check.stdout != "0"